# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# ESLint is a tool for identifying and reporting on patterns
# found in ECMAScript/JavaScript code.
# More details at https://github.com/eslint/eslint
# and https://eslint.org

name: ESLint and Prettier

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: '25 9 * * 5'

jobs:
  eslint-prettier:
    name: Run ESLint and Prettier scanning
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install ESLint and Prettier
        run: |
          npm install eslint@latest --save-dev
          npm install @microsoft/eslint-formatter-sarif@3.1.0
      # Run Prettier auto-format
      # - name: Run Prettier auto-format
      #   run: |
      #     npx prettier --write "**/*.{js,jsx,ts,tsx,json,md}"
      
      # Run ESLint with Prettier integrated
      - name: Run ESLint with Prettier integrated
        env:
          SARIF_ESLINT_IGNORE_SUPPRESSED: "true"
        run: |
          npx eslint . \
          --config .eslintrc.json \
          --ext .js,.jsx,.ts,.tsx \
          --format @microsoft/eslint-formatter-sarif \
          --output-file eslint-results.sarif
        continue-on-error: false  # Á°Æ‰øùÂ¶ÇÊûú ESLint Ê£ÄÊü•Â§±Ë¥•ÔºåÊï¥‰∏™ÊûÑÂª∫Â§±Ë¥•

      - name: Upload analysis results to GitHub
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: eslint-results.sarif
          wait-for-processing: true

      - name: Send ESLint and Prettier notification to Discord
        if: failure()  
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_SHA: ${{ github.sha }}
          GITHUB_REF_NAME: ${{ github.ref_name }}
          GITHUB_RUN_ID: ${{ github.run_id }}
          DEPLOY_URL: ${{ secrets.VERCEL_PROJECT_DOMAIN }}
        run: |
          MESSAGE="‚ùå **ESLint and Prettier Check Failed**\n\n"
          MESSAGE+="**Repository**: ${{ github.repository }}\n"
          MESSAGE+="**Commit**: \`${{ github.sha }}\`\n"
          MESSAGE+="**Branch**: ${{ github.ref_name }}\n\n"
          MESSAGE+="üö® **Build Failed**: Please check the logs for more details.\n"
          MESSAGE+="üîó **View CI/CD Logs**: [GitHub Actions Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\n"
          
          # Sending failure message to Discord
          curl -X POST -H "Content-Type: application/json" -d "{\"content\": \"$MESSAGE\"}" $DISCORD_WEBHOOK_URL

      - name: Send success notification to Discord
        if: success() 
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_SHA: ${{ github.sha }}
          GITHUB_REF_NAME: ${{ github.ref_name }}
          GITHUB_RUN_ID: ${{ github.run_id }}
          DEPLOY_URL: ${{ secrets.VERCEL_PROJECT_DOMAIN }}
        run: |
          MESSAGE="‚úÖ **Build Succeeded**: Branch '${{ github.ref_name }}'\n\n"
          MESSAGE+="**Commit**: \`${{ github.sha }}\`\n"
          MESSAGE+="**Author**: ${{ github.actor }}\n\n"
          MESSAGE+="üåê **Deployed to Vercel**: [${{ secrets.VERCEL_PROJECT_DOMAIN }}](${ secrets.VERCEL_PROJECT_DOMAIN })\n"
          MESSAGE+="üîó **View CI/CD Logs**: [GitHub Actions Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\n"
          
          # Sending success message to Discord
          curl -X POST -H "Content-Type: application/json" -d "{\"content\": \"$MESSAGE\"}" $DISCORD_WEBHOOK_URL
